"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const client_1 = require("@prisma/client");
const dotenv_1 = require("dotenv");
(0, dotenv_1.config)();
const prisma = new client_1.PrismaClient();
async function seedPositions() {
    console.log('üîß Configura√ß√µes do banco:');
    console.log(`DATABASE_URL: ${process.env.DATABASE_URL}`);
    const positionsToCreate = [
        { name: 'Pastor(a)' },
        { name: 'Presb√≠tero(a)' },
        { name: 'Evangelista' },
        { name: 'Mission√°rio(a)' },
        { name: 'Di√°cono(a)' },
        { name: 'Ap√≥stolo(a)' },
        { name: 'Ministro(a) de Louvor' },
        { name: 'Membro da Igreja' },
        { name: 'Secret√°rio(a)' },
        { name: 'Tesoureiro(a)' },
        { name: 'Administrador(a)' },
        { name: 'Coordenador(a) de Minist√©rios' },
        { name: 'Dirigente de Congrega√ß√£o' },
        { name: 'L√≠der de C√©lula / Pequenos Grupos' },
        { name: 'L√≠der de Minist√©rio Infantil' },
        { name: 'L√≠der de Minist√©rio de Jovens' },
        { name: 'L√≠der de Minist√©rio de Mulheres' },
        { name: 'L√≠der de Minist√©rio de Homens' },
        { name: 'L√≠der de Intercess√£o' },
        { name: 'L√≠der de A√ß√£o Social' },
        { name: 'L√≠der de Discipulado' },
        { name: 'L√≠der de Ensino / Escola B√≠blica' },
        { name: 'L√≠der de Casais / Fam√≠lia' },
        { name: 'L√≠der de Comunica√ß√£o / M√≠dia' },
        { name: 'M√∫sico / Instrumentista' },
        { name: 'Cantor(a) / Back Vocal' },
        { name: 'Recepcionista / Acolhedor' },
        { name: 'Seguran√ßa / Zelador do templo' },
        { name: 'Equipe de Limpeza' },
        { name: 'T√©cnico de Som / Multim√≠dia' },
        { name: 'Operador de Proje√ß√£o / Transmiss√£o ao vivo' },
    ];
    console.log('üöÄ Iniciando seed das positions...');
    try {
        let createdCount = 0;
        let existingCount = 0;
        for (const positionData of positionsToCreate) {
            const existingPosition = await prisma.position.findFirst({
                where: { name: positionData.name },
            });
            if (!existingPosition) {
                await prisma.position.create({
                    data: positionData,
                });
                console.log(`‚úÖ Position '${positionData.name}' criada com sucesso`);
                createdCount++;
            }
            else {
                console.log(`‚ö†Ô∏è  Position '${positionData.name}' j√° existe no banco de dados`);
                existingCount++;
            }
        }
        console.log(`\nüìä Relat√≥rio do seed:`);
        console.log(`   ‚Ä¢ ${createdCount} positions criadas`);
        console.log(`   ‚Ä¢ ${existingCount} positions j√° existiam`);
        console.log(`   ‚Ä¢ ${positionsToCreate.length} positions total`);
        console.log('üéâ Seed das positions conclu√≠do com sucesso!');
    }
    catch (error) {
        console.error('‚ùå Erro ao executar seed das positions:', error);
        process.exit(1);
    }
    finally {
        await prisma.$disconnect();
    }
}
seedPositions().catch((error) => {
    console.error('‚ùå Erro fatal ao executar seed:', error);
    process.exit(1);
});
//# sourceMappingURL=seed-positions.js.map