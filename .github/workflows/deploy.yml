name: CI/CD Pipeline

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]

jobs:
  test:
    name: Testes e Validações
    runs-on: ubuntu-latest
    strategy:
      matrix:
        node-version: [22.x]
    steps:
      - name: Checkout do código
        uses: actions/checkout@v4

      - name: Configurar Node.js ${{ matrix.node-version }}
        uses: actions/setup-node@v4
        with:
          node-version: ${{ matrix.node-version }}
          cache: 'npm'

      - name: Instalar dependências
        run: npm ci

      - name: Gerar cliente Prisma
        run: npm run generate
        env:
          DATABASE_URL: ${{ secrets.DATABASE_URL }}
          DIRECT_URL: ${{ secrets.DIRECT_URL }}

      - name: Aplicar migrações do banco
        run: npm run prisma:deploy
        env:
          DATABASE_URL: ${{ secrets.DATABASE_URL }}
          DIRECT_URL: ${{ secrets.DIRECT_URL }}

      - name: Verificar formatação do código
        run: npm run format

      - name: Executar linter
        run: npm run lint

      - name: Executar testes
        run: npm test -- --passWithNoTests
        env:
          JWT_SECRET: ${{ secrets.JWT_SECRET }}
          DATABASE_URL: ${{ secrets.DATABASE_URL }}
          DIRECT_URL: ${{ secrets.DIRECT_URL }}

      - name: Build da aplicação
        run: |
          npm run build
          cp package.json dist/
          cp tsconfig.json dist/
        env:
          JWT_SECRET: ${{ secrets.JWT_SECRET }}
          DATABASE_URL: ${{ secrets.DATABASE_URL }}
          DIRECT_URL: ${{ secrets.DIRECT_URL }}

  deploy:
    name: Deploy para Produção
    needs: test
    runs-on: ubuntu-latest
    if: github.event_name == 'push' && github.ref == 'refs/heads/main'
    steps:
      - name: Checkout do código
        uses: actions/checkout@v4

      - name: Configurar Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '22.x'
          cache: 'npm'

      - name: Instalar dependências
        run: npm ci

      - name: Gerar cliente Prisma
        run: npm run generate
        env:
          DATABASE_URL: ${{ secrets.DATABASE_URL }}
          DIRECT_URL: ${{ secrets.DIRECT_URL }}
          NODE_ENV: ${{ secrets.NODE_ENV }}

      - name: Aplicar migrações do banco
        run: npm run prisma:deploy
        env:
          DATABASE_URL: ${{ secrets.DATABASE_URL }}
          DIRECT_URL: ${{ secrets.DIRECT_URL }}
          NODE_ENV: ${{ secrets.NODE_ENV }}

      - name: Build da aplicação (NestJS + Prisma)
        run: npm run build
        env:
          JWT_SECRET: ${{ secrets.JWT_SECRET }}
          DATABASE_URL: ${{ secrets.DATABASE_URL }}
          DIRECT_URL: ${{ secrets.DIRECT_URL }} 

      - name: Instalar Vercel CLI
        run: npm install -g vercel

      - name: Pull configurações do Vercel
        run: vercel pull --yes --environment=production --token=${{ secrets.VERCEL_TOKEN_CENTRAL_DA_FE_API }}

      - name: Build do projeto (Vercel)
        run: vercel build --token=${{ secrets.VERCEL_TOKEN_CENTRAL_DA_FE_API }}
        env:
          JWT_SECRET: ${{ secrets.JWT_SECRET }}
          DATABASE_URL: ${{ secrets.DATABASE_URL }}
          DIRECT_URL: ${{ secrets.DIRECT_URL }}
          NODE_ENV: ${{ secrets.NODE_ENV }}

      - name: Deploy para o Vercel
        run: vercel deploy --prebuilt --token=${{ secrets.VERCEL_TOKEN_CENTRAL_DA_FE_API }}
